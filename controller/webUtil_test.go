package controller

import (
	"encoding/json"
	"fmt"
	"github.com/satori/go.uuid"
	"io/ioutil"
	"net/http"
	"reflect"
	"regexp"
	"smy/model"
	"strings"
	"testing"
)

func TestInit(t *testing.T) {
	//initA()
	var id = uuid.NewV4().String()
	fmt.Println(len(id), id)
	id = strings.ReplaceAll(id, "-", "")
	fmt.Println(id, len(id))

}
func TestStuctParse(t *testing.T) {
	eth := model.ETH
	ty := reflect.ValueOf(eth)
	fmt.Println(ty.Kind(), ty.Type().Name())
	stu := model.Student{}
	stu.ID = "123"

}
func TestRegx(t *testing.T) {
	bool, err := regexp.MatchString("(/smy/controller/LoginStudent)|(/smy/controller/LoginTeacher)", "/smy/controller/LoginStudent")
	fmt.Println(bool, err)
	errMsg := make(map[string]string)
	fmt.Println(errMsg == nil)
}
func TestANo(t *testing.T) {
	mp := make(map[string]*string)
	var str = "aa"
	mp["aa"] = &str
	mstr, b := mp["aa"]
	fmt.Println(mstr, b)
}

type AutoGenerated struct {
	Code    int      `json:"code"`
	Message string   `json:"message"`
	Result  []Result `json:"result"`
}
type Content struct {
	AllRate    string `json:"all_rate"`
	SongID     string `json:"song_id"`
	RankChange string `json:"rank_change"`
	Biaoshi    string `json:"biaoshi"`
	Author     string `json:"author"`
	AlbumID    string `json:"album_id"`
	PicSmall   string `json:"pic_small"`
	Title      string `json:"title"`
	PicBig     string `json:"pic_big"`
	AlbumTitle string `json:"album_title"`
}
type Result struct {
	PicS210 string    `json:"pic_s210"`
	BgPic   string    `json:"bg_pic"`
	Color   string    `json:"color"`
	PicS444 string    `json:"pic_s444"`
	Count   int       `json:"count"`
	Type    int       `json:"type"`
	Content []Content `json:"content"`
	BgColor string    `json:"bg_color"`
	WebURL  string    `json:"web_url"`
	Name    string    `json:"name"`
	Comment string    `json:"comment"`
	PicS192 string    `json:"pic_s192"`
	PicS260 string    `json:"pic_s260"`
}
func TestJson(t *testing.T) {
	url := "https://api.apiopen.top/musicRankings"
	resp, err := http.Get(url)
	if err != nil {
		fmt.Println(err)
	}
	defer resp.Body.Close()
	var st AutoGenerated
	bts, err := ioutil.ReadAll(resp.Body)
	json.Unmarshal(bts,&st)
	fmt.Println(st)
}
